const { Router } = require("express");
const { Project } =require( "../db/models/Project");
const { login_required } = require("../middlewares/login_required");

const ProjectRouter = Router();
// having setup ready for http methods
// http methods 준비

//alligned in same sequence of methods in Project file
//Project class에서 같은 순서로 router 배치



// CRUD: CREATE
//insert new project document with input from frontent
//프론트엔드에서 입력받은 정보로 새러운 project document 생성
ProjectRouter.post("/:user_id/project",login_required,async(req,res)=>{
    const newProjectData=req.body;

    newProjectData["userId"]=req.params.user_id;
    try{
        const newProject= await Project.create({ newProject:newProjectData });
        console.log(newProject);
        res.status(200).json(newProject);
        // HTTP status code 200 is known as "OK". 
        //It indicates that the request has been successfully processed
    } catch (error){
        console.error(error);
        res.status(500).json({message:"Server error"});
        //The HTTP status code 500 indicates a server error.
    }

    return;
});



//CRUD:READ
//read project document that corresponds to project_title in request from frontend
//frontend에서 받은 project_title에 해당하는 project document를 읽는다
ProjectRouter.get("/project/:project_title", login_required, async(req, res)=>{  

    const projecttitle = req.params.edu_id;
    try{
    const project_document = await Project.findByTitle({project_title:projecttitle});
    res.status(200).json(project_document);    
    } catch(error){
        console.error(error);
        res.status(500).json({message:"Server error"});
    }
    
    return;
});


//CRUD:READ
//read project document that corresponds to project_organization in request from frontend
//frontend에서 받은 project_organization에 해당하는 project document를 읽는다
ProjectRouter.get("/project/:project_organization", login_required, async(req, res)=>{  

    const projectorganization = req.params.edu_id;
    try{
    const project_document = await Project.findByOrgnaization({project_organization:projectorganization});
    res.status(200).json(project_document);    
    } catch(error){
        console.error(error);
        res.status(500).json({message:"Server error"});
    }
    
    return;
});


//CRUD:READ
//read project document that corresponds to userId in request from frontend
//frontend에서 받은 userId에 해당하는 project document를 읽는다
ProjectRouter.get("/:user_id/project", login_required, async(req, res)=>{
    const userId=req.params.user_id;
    try{
    const project_document=await Project.findProjectByUserId({user_Id:userId});
    res.status(200).json(project_document);
    } catch(error){
        console.error(error);
        res.status(500).json({message:"Server error"});
    }

    return;
});

// CRUD: UPDATE
//insert project document that corresponds to userId in request from frontend
//frontend에서 받은 userId에 해당하는 project document를 읽는다
ProjectRouter.put("/project/:project_title", login_required, async(req, res)=>{  

    const updatedProjectData = req.body;
    const projecttitle = req.params.project_title;
    try{
    const updatedProject = await Project.update({project_title:projecttitle},{updateobject:updatedProjectData});
    res.status(200).json(updatedProject);
    }catch(error){
        console.error(error);
        res.status(500).json({message:"Server error"});
    }

    return;
   

});

// CRUD: DELETE
// delete the document of corresponding title
// 프론트엔드로 전달받은 project_title을 통해 해당 document 삭제
ProjectRouter.delete("/project/:project_title", async(req, res)=>{  

    const projecttitle = req.params.project_title;
    try{
    const deletedProject = await Project.delete({ project_title:projecttitle });
    res.status(200).json(deletedProject);
    }catch(error){
        console.error(error);
        res.status(500).json({message:"Server error"});
    }

    return;
   
});

module.exports = ProjectRouter;
